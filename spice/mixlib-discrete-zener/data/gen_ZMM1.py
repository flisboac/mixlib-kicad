import re
from pathlib import Path
from textwrap import dedent

number_re = re.compile(r"(?P<first>[+-]?\d+(\.\d+)?)(.*(?P<second>[+-]?\d+(\.\d+)?)|.*)?")

script_dir = Path(__file__).parent
zener_dir = script_dir.parent

zmm1_zmm36_lines: dict[str, str] = {}

ir = '100nA'

for data_filename, iztest, cjo in (("ZMM1-ZMM36.csv", '5m', '700p'), ("ZMM39-ZMM75.csv", '2.5m', '700p')):
    with open(script_dir / data_filename, "r", encoding="utf-8") as data_file:
        for line_no, line in enumerate(data_file.readlines()):
            if line_no == 0:
                continue
            line = line.strip()
            pn, vzmin_str, vzmax_str, rzj5_str, rzj1_str, avz_str, vr_str, izmax_str = line.split(";")
            print(dict(pn=pn, vzmin_str=vzmin_str, vzmax_str=vzmax_str, rzj5_str=rzj5_str, rzj1_str=rzj1_str, avz_str=avz_str, vr_str=vr_str, izmax_str=izmax_str))
            vzmin = float(vzmin_str)
            vzmax = float(vzmax_str)
            vznom = (vzmax + vzmin) / 2
            rzj5 = int(number_re.search(rzj5_str).group("first"))
            rzj1 = int(number_re.search(rzj1_str).group("first"))
            avz_min = int(number_re.search(avz_str).group("first"))
            avz_max = int(number_re.search(avz_str).group("second"))
            avz = (avz_max - avz_min) / 2
            vr = 0
            vr_str = vr_str.strip()
            if vr_str != "-":
                vr = int(number_re.search(vr_str).group("first"))
            izmax = int(number_re.search(izmax_str).group("first"))
            # print(dict(vznom=vznom, rzj5=rzj5, rzj1=rzj1, avz=avz, vr=vr, izmax=izmax))
            zmm1_zmm36_lines[f"{pn}.cir"] = dedent(
                f"""
                *
                * This file was autogenerated. Check data/gen_ZMM1.py for more details.
                *
                .include include/ZMMx.cir
                .subckt {pn} K A
                X1 A K ZMMx Vznom={vznom:.06} Iztest={iztest} Vr={vr} Ir={ir} Rzj={rzj5} Izmax={izmax}m Cjo={cjo}
                .ends {pn}
                """
            )

for basename, contents in zmm1_zmm36_lines.items():
    with open(zener_dir / basename, "w", encoding="utf-8") as output_file:
        output_file.write(contents)
        output_file.write("\n")
